@startuml

class Lector {
  -id_lector
  
  + solicitarPrestamo()
  + solicitarRegistro()
  + renovarPrestamo()
  + devolverLibro()
}

class Administrador {
  -registrar_usuario(usuario)
  -actualizar_usuario(usuario)
  -ver_usuarios(id_usuario)
  -eliminar_usuario(id_usuario)
  -registrar_libro(id_libro)
  -actualizar_libro(id_libro)
  -ver_libros(id_libro)
  -listar_libros()
  -eliminar_libro(id_libro)

}

class Bibliotecario {
  - CrudLibros()
}

class Registro {
  - finalizarPrestamo()
  - realizarPrestamo()
  - extenderPrestamo()
  - reservarLibro()
}

class CatalogoDeLibros {
  + obtener_copia(id_libro)
  + buscar_libro(id_libro)
  + filtrar_busqueda(autor,categoria)
}

class Prestamo {
  -id_prestamo
  -id_libro
  -id_usuario
  -fecha_inicio
  -fecha_fin
  -activo
  
  
  + sancionar()
}
class Usuario {
  -id_usuario
  -nombre
  -Apellidos
  -correo
  +iniciar_sesion(correo, contraseña)
  +cerrar_sesion()
}
class libro{
- IdLibro
- Titulo
- ISBN
- Autor
- Editorial
- AnioDePublicacion
- Edicion
- NumeroDePaginas
- NumeroDeCopias
}
class copia{
  - IdLibro
- Estado

}
class registro{
  
+ finalizarPrestamo(IdPrestamo)
+ realizarPrestamo(IdLibro, IdUsuario)
+ extenderPrestamo(IdPrestamo)
+ reservarPrestamo(IdLibro, IdUsuario)

}
Lector "1" *--* "1" Prestamo
note right of Lector: El lector puede tener un préstamo

Bibliotecario *--* CatalogoDeLibros
note left of Bibliotecario: El bibliotecario puede acceder al catálogo de libros

Administrador *-- Lector
note top of Administrador: El administrador puede gestionar a los lectores

Administrador *-- Bibliotecario
note top of Administrador: El administrador puede gestionar a los bibliotecarios

Administrador *-- Registro
note top of Administrador: El administrador puede gestionar los registros

Registro *--* Prestamo
note left of Registro: El registro puede tener varios préstamos

@enduml